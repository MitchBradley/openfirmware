\ See license at end of file
purpose: Build Open Firmware core for PC

dictionary: ${BP}/cpu/x86/build/basefw.dic
command: &x86forth &dictionary &this
in: builton.fth
in: bootsec.hex
build-now

hex
\ ' $report-name is include-hook

fload ${BP}/cpu/x86/pc/biosload/config.fth

: headerless ;  : headers  ;  : headerless0 ;

' (quit) to quit

: \Tags [compile] \  ; immediate
: \NotTags [compile] \  ; immediate

: RAMbase  ( -- adr )  fw-virt-base  ;
: RAMtop  ( -- adr )  RAMbase /fw-ram +  ;

h# 00.0000 value    dp-loc	\ Set in patchboot
: stacktop    ( -- adr )  RAMtop  ;
: dict-limit  ( -- adr )  RAMtop  h# 06.0000 -  ;

\ XXX What we should do is pass in the top address in SP, and have
\ boot.fth allocate the user area by subtracting user-size.  But
\ we need some way of finding it again for exception re-entry.
\ prom-main-task is used in arch/pc/boot.fth .  The constant
\ value is wired into the assembly code
stacktop  user-size - ( fw-virt-base - ) constant prom-main-task	\ user area for main task

0 value load-limit	\ Top address of area at load-base
' 2drop to sync-cache

def-load-base ' load-base set-config-int-default

true ' fcode-debug? set-config-int-default
\ false  ' auto-boot?    set-config-int-default

[ifdef] serial-console
" com1" ' output-device set-config-string-default
" com1" ' input-device set-config-string-default
[then]

\ XXX should be loaded by basefw.bth
fload ${BP}/cpu/x86/initpgm.fth		\ Basic boot handler
fload ${BP}/cpu/x86/msr.fth	        \ Access to machine specific registers

: (cpu-arch  ( -- adr len )
   " architecture" ['] root-node  get-package-property  drop
   get-encoded-string
;
' (cpu-arch to cpu-arch

h# 1000 to pagesize
d# 12   to pageshift

dev /
1 encode-int  " #address-cells"  property
1 encode-int  " #size-cells"     property
" Generic PC" model
" PC" encode-string  " architecture" property

\ XXX figure out bus frequency.  How?
\ d# 33,333,333 " clock-frequency" integer-property
device-end

\ Memory management services
[ifdef] virtual-mode
fload ${BP}/ofw/core/clntmem1.fth	\ client services for memory
[else]
fload ${BP}/ofw/core/clntphy1.fth	\ client services for memory
[then]
fload ${BP}/ofw/core/memlist.fth	\ Resource list common routines
fload ${BP}/ofw/core/showlist.fth	\ Linked list display tool
fload ${BP}/ofw/core/allocph1.fth	\ S Physical memory allocator
fload ${BP}/ofw/core/availpm.fth	\ Available memory list
fload ${BP}/ofw/core/allocmor.fth	\ Secondary allocator

fload ${BP}/cpu/x86/pc/rootnode.fth	\ Platform-specific root node changes

fload ${BP}/cpu/x86/pc/biosload/probemem.fth	\ Memory probing

[ifdef] virtual-mode
fload ${BP}/cpu/x86/loadvmem.fth	\ /mmu node
stand-init: MMU
   " /mmu" open-dev mmu-node !
;
fload ${BP}/cpu/x86/pc/initdict.fth	\ Dynamic dictionary allocation
[then]

\ XXX should be elsewhere
dev /client-services
: chain  ( len args entry size virt -- )
   release                                       ( len args entry )
   h# 8000 alloc-mem h# 8000 +  (init-program)   ( len args )
   to %ebx  to %ecx
   go
;
device-end

fload ${BP}/cpu/x86/crc32.fth		\ Assembly language Zip CRC calculation
fload ${BP}/forth/lib/crc32.fth	\ High-level portion of CRC calculation

[ifdef] resident-packages

[ifdef]  use-ufs
support-package: ufs-file-system
   fload ${BP}/ofw/fs/ufs/ufs.fth	\ Unix file system
end-support-package
[then]

[ifdef] linux-support
\needs unix-seconds>  fload ${BP}/ofw/fs/unixtime.fth	\ Unix time calculation
support-package: ext2-file-system
   fload ${BP}/ofw/fs/ext2fs/ext2fs.fth	\ Linux file system
end-support-package
[then]

support-package: zip-file-system
   fload ${BP}/ofw/fs/zipfs.fth		\ Zip file system
end-support-package

support-package: dropin-file-system
   fload ${BP}/ofw/fs/dropinfs.fth	\ Dropin file system
end-support-package
[then]

\ Load file format handlers

: call32 ;

fload ${BP}/ofw/core/allocsym.fth    \ Allocate memory for symbol table
fload ${BP}/ofw/core/symcif.fth
fload ${BP}/ofw/core/symdebug.fth
: release-load-area  ( boundary-adr -- )  drop  ;

fload ${BP}/cpu/x86/pc/fixkbd.fth	\ Switch keyboard scan codes

[ifdef] use-elf
fload ${BP}/ofw/elf/elf.fth
fload ${BP}/ofw/elf/elfdebug.fth
[ifdef] virtual-mode
\ Depends on the assumption that physical memory is mapped 1:1 already
: (elf-map-in) ( va size -- )  0 mem-claim  drop  ;
[else]
: (elf-map-in)  ( va size -- )  2drop  ;
[then]
' (elf-map-in) is elf-map-in
[then]

\ Reboot and re-entry code
fload ${BP}/cpu/x86/pc/reboot.fth	\ Restart the client program
fload ${BP}/cpu/x86/pc/reenter.fth	\ Various entries into Forth

headerless
[ifdef] virtual-mode
: (initial-heap)  ( -- adr len )  sp0 @ ps-size -  dict-limit  tuck -  ;
[else]
: (initial-heap)  ( -- adr len )  heap-base heap-size  ;
[then]
' (initial-heap) is initial-heap
headers

" /openprom" find-device
   " FirmWorks,3.0" encode-string " model" property
device-end

[ifdef] virtual-mode
fload ${BP}/cpu/x86/pc/mmusetup.fth	\ Initial values for MMU lists
[ifdef] olpc
dev /mmu
: claim-rom  ( -- )
   (initial-claim)
   rom-pa  h# ffff.0000 over -  claim-virtual drop   \ ROM 1-1 map
;
' claim-rom to initial-claim
dend
[then]
[then]

fload ${BP}/cpu/x86/pc/biosload/devices.fth

fload ${BP}/dev/scsi/probscsi.fth	\ probe-scsi and probe-scsi-all

true ' local-mac-address? set-config-int-default
[ifdef] resident-packages
support-package: nfs
   fload ${BP}/ofw/fs/nfs/loadpkg.fth
end-support-package
[then]
devalias nfs net//obp-tftp:last//nfs

[ifdef] use-iscsi
support-package: iscsi
   fload ${BP}/ofw/inet/iscsi/loadiscsi.fth
end-support-package
[then]

fload ${BP}/ofw/inet/loadtcp.fth

support-package: http
   fload ${BP}/ofw/inet/http.fth	\ HTTP client
end-support-package

[ifndef] use-timestamp-counter
fload ${BP}/cpu/x86/pc/mscal.fth
[then]
fload ${BP}/cpu/x86/pc/boot.fth
fload ${BP}/cpu/x86/pc/linux.fth

hex 
\ If there is a PCI ethernet adapter, use it as the default net device,
\ otherwise use any ethernet that can be found in the device tree.
: report-net  ( -- )
   " /pci/ethernet" 2dup  find-package  if  ( name$ phandle )
      drop                                  ( name$ )
   else                                     ( name$ )
      2drop  " /ethernet"                   ( name$' )
   then                                     ( name$ )
   " net" 2swap $devalias                   ( )
;

fload ${BP}/cpu/x86/pc/biosload/usb.fth
fload ${BP}/cpu/x86/pc/rmtools.fth
fload ${BP}/cpu/x86/pc/biosload/callbios.fth
\ fload ${BP}/cpu/x86/pc/biosload/rmenter.fth

[ifdef] syslinux-loaded
fload ${BP}/cpu/x86/pc/biosload/callvbe.fth
[then]

\ false to stand-init-debug?
true to stand-init-debug?

hex
stand-init-debug?  [if]
warning @  warning off 
: init
\ initial-heap add-memory
   init

   standalone?  if
      cr ." Type 'i' to interrupt stand-init sequence" cr 
      d# 2000 ms
      key?  if
         key upc ascii I  =  if  ." Interacting" cr  hex interact  then
      then
   then
\  cr0@ h# 9fff.ffff and cr0!	\ enable L1 and L2 caches
;
warning !
[then]

[ifdef] virtualbox-loaded
also hidden also keys-forth definitions
\ The VirtualBox "serial port" can be accessed via a telnet client.
\ Telnet normally sends CR-LF at the end of the line and it is hard
\ to turn that off because of incompatibilies between various clients
\ and servers.  So if there is a key already queued up right after a
\ newline, we just eat it.
: telnet-newline  ( -- )
   new-line-or-done  key?  if  key drop  then
;
warning @ warning off
: ^m telnet-newline  ;
: ^j telnet-newline  ;
warning !
previous previous definitions
[then]

: (.firmware)  ( -- )
   ." Open Firmware  "  .built  cr
   ." Copyright 1999 FirmWorks  All Rights Reserved" cr
;
' (.firmware) to .firmware

: linux-logo  ( -- )
   " penguin.txt" find-drop-in  if  page type  then
;

[ifdef] olpc
fload  ${BP}/cpu/x86/pc/olpc/usbpwr.fth
devalias net /wlan
[then]

: probe-all  ( -- )
   " probe-" do-drop-in
   ." probe-pci"  cr
\   debug-me
   probe-pci
[ifdef] probe-isa-modem
   probe-isa-modem
[then]
[ifdef] olpc
   power-cycle-usb
   probe-usb
[else]
   probe-usb
   report-net
[then]
   report-disk
   report-pci-fb
   \ In case the config vars are stored on a USB stick ...
   [ifdef] reread-config-vars
      config-valid? 0=  if
         reread-config-vars
         use-nvramrc?  if  nvramrc safe-evaluate  then
      then
   [then]
;

: startup  ( -- )
   standalone?  0=  if  exit  then
\   ." calibrate-ms"  cr
\   calibrate-ms

    ." nvramrc" cr
    use-nvramrc?  if  nvramrc safe-evaluate  then

   auto-banner?  if
      " Probing" ?type  probe-all
      " Install console" ?type  install-console
      ?usb-keyboard
      banner
   then

   hex
   warning on
   only forth also definitions

\   install-alarm

   #line off

   ." Open Firmware demonstration version by FirmWorks (info@firmworks.com)" cr

[ifdef] linux-support
   ." See "
   blue-letters ." http://www.firmworks.com/linux/demo.html" black-letters
   cr cr

   ." Type 'help-linux' to learn about Linux loading options" cr
[then]
   quit
;

[ifdef] use-watch-all
fload ${BP}/cpu/x86/pc/watchall.fth
[then]

alias crcgen drop  ( crc byte -- crc' )
fload ${BP}/cpu/x86/pc/saveabs.fth

fload ${BP}/forth/lib/selstr.fth

\needs ramdisk  " " d# 128 config-string ramdisk
" console=tty0 console=ttyS0,115200"   ' boot-file    set-config-string-default

[ifdef] pc-linux
" a:\initrd.imz" d# 128 config-string ramdisk
" root=/dev/ram0 mount_ramdisk=1"  ' boot-file        set-config-string-default
" a:\vmlinuz"                      ' boot-device      set-config-string-default
true                               ' client-symbols?  set-config-int-default
\ Also try " console=/dev/ttyS0,9600 console=/dev/tty0" in boot-file
[then]

\ XXX delete me
\ [ifdef] linux-support
\ fload ${BP}/cpu/x86/pc/biosload/linux.fth
\ [then]

fload ${BP}/cpu/x86/pc/biosload/vmdoor.fth   \ VMware interfaces

fload ${BP}/cpu/x86/pc/biosload/intelfb.fth  \ Intel frame buffer setup

" dhcp" ' ip-address  set-config-string-default

.( SAVING FW.dic ...)
" fw.dic" $save-forth cr

.( Saving fw.img ...)
" fw.img"  RAMbase save-abs-rom cr

\ LICENSE_BEGIN
\ Copyright (c) 2006 FirmWorks
\ 
\ Permission is hereby granted, free of charge, to any person obtaining
\ a copy of this software and associated documentation files (the
\ "Software"), to deal in the Software without restriction, including
\ without limitation the rights to use, copy, modify, merge, publish,
\ distribute, sublicense, and/or sell copies of the Software, and to
\ permit persons to whom the Software is furnished to do so, subject to
\ the following conditions:
\ 
\ The above copyright notice and this permission notice shall be
\ included in all copies or substantial portions of the Software.
\ 
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
\ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
\ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\
\ LICENSE_END
