== Booting OFW Under QEMU or VirtualBox ==

You can boot OFW directly from the BIOS in QEMU; you don't need
Coreboot (formerly LinuxBIOS) or external bootloaders like GRUB
or Lilo or syslinux.  OFW has its own little (two sector) BIOS
bootloader that can be used to make a bootable floppy image.

The instructions below tell how to prepare a bootable floppy
disk image that can be booted from QEMU, VirtualBox, or several
other emulators.

=== Build OFW ===

 $ cd cpu/x86/pc/biosload/
 $ cp config-virtualbox.fth config.fth
 $ cd build
 $ cd cpu/x86/pc/biosload/build
 $ make floppyofw.img

The "config-virtualbox.fth" configuration is known to work with QEMU.
Other configurations may work also - but the "qemu-loaded" config
option isn't what you want for this technique, because it's a subcase
of the CoreBoot-payload configuration.

You will use the "floppyofw.img" output file in a later step.

=== Make a bootable Floppy Image ===

 $ ../../../Linux/forth fw.dic ../makefloppy.fth

This creates a file that is a bootable floppy image with an empty
FAT12 filesystem.  This step only has to be done once.

=== Copy OFW onto the Floppy Image ===

 $ mkdir flp
 $ sudo mount -t msdos -o loop floppy.img flp
 $ sudo cp floppyofw.img flp/ofw.img
 $ sudo umount flp

=== Boot OFW from QEMU ===

 $ qemu -L <dir> -boot a -fda floppy.img

"<dir>" is the directory that contains QEMU's BIOS and VGA BIOS files.

If you want to make changes and recompile OFW, you need not repeat the
"makefloppy" step; you can just loopback mount the floppy image and
copy the new OFW version to ofw.img .

== What is on the Floppy Image ==

The floppy image is a bootable floppy with a FAT12 filesystem.  Its first two
sectors contain a simple bootloader program that uses BIOS INT 13 callbacks to
read floppy sectors.  The program scans the FAT root directory entries to find
the file "ofw.img", then loads that into memory and jumps to it.

When you build floppyofw.img, as a side effect it also builds bootsec.img, which
is that simple bootloader.  The source code (Forth-style assembly language) is in
biosload/bootsec.fth .

The "makefloppy.fth" program that creates the image is pretty simple; it copies
bootsec.img to the output file "floppy.img", creates a couple of initially
empty FAT tables, zeros the root directory area, and fills the data area with
zeros.

== Making a Prototype Floppy Image with Linux Commands ==

Here's a pair of Linux commands that accomplish the same thing
as makefloppy.fth:

 Step6a $ /sbin/mkdosfs -C -f 2 -F 12 -R 2 -r 224 -s 1 -S 512 floppy.img 1440
 Step6b $ dd <bootsec.img of=floppy.img conv=nocreat,notrunc

The arguments to mkdosfs force the filesystem layout to match the layout that
is specified in the BIOS parameter block in bootsec.img.

The advantage of makefloppy.fth is that it reads the filesystem layout parameters
from the BPB in bootsec.img, so its guaranteed to be consistent.  If bootsec.fth
were edited to change the layout, the arguments to "mkdosfs" would have to change.
(But there's little need to change that layout, since it's a standard floppy
size.)

The advantage of the Linux command sequence is that it creates a file with
"holes", thus saving disk space for awhile (until something fills in the holes).
