purpose: Build Open Firmware for Dave Neptune board
\ See license at end of file

dictionary: ${BP}/cpu/x86/build/basefw.dic
command: &x86forth &dictionary &this
in: builton.fth
build-now

" fw.tag" r/w create-file drop  tag-file !

hex
\ ' $report-name is include-hook

fload ${BP}/cpu/x86/pc/neptune/config.fth

: headerless ;  : headers  ;  : headerless0 ;

' (quit) to quit

create debug-startup
: \Tags [compile] \  ; immediate
: \NotTags [compile] \  ; immediate

: RAMbase  ( -- adr )  fw-virt-base  ;
: RAMtop  ( -- adr )  RAMbase /fw-ram +  ;

h# 00.0000 value    dp-loc	\ Set in patchboot
: stacktop    ( -- adr )  RAMtop  ;
: dict-limit  ( -- adr )  RAMtop  h# 06.0000 -  ;

\ XXX What we should do is pass in the top address in SP, and have
\ boot.fth allocate the user area by subtracting user-size.  But
\ we need some way of finding it again for exception re-entry.
\ prom-main-task is used in arch/pc/boot.fth .  The constant
\ value is wired into the assembly code
stacktop  user-size - constant prom-main-task	\ user area for main task

0 value load-limit	\ Top address of area at load-base
' 2drop to sync-cache

def-load-base ' load-base set-config-int-default

true ' fcode-debug? set-config-int-default
true  ' auto-boot?    set-config-int-default

[ifdef] serial-console
" com1" ' output-device set-config-string-default
" com1" ' input-device set-config-string-default
[then]

\ XXX should be loaded by basefw.bth
fload ${BP}/cpu/x86/initpgm.fth		\ Basic boot handler
fload ${BP}/cpu/x86/msr.fth	        \ Access to machine specific registers

: (cpu-arch  ( -- adr len )
   " architecture" root-phandle  get-package-property  drop
   get-encoded-string
;
' (cpu-arch to cpu-arch

h# 1000 to pagesize
d# 12   to pageshift

dev /
1 encode-int  " #address-cells"  property
1 encode-int  " #size-cells"     property
" Neptune" encode-string  " architecture" property
device-end

\ Memory management services
[ifdef] virtual-mode
fload ${BP}/ofw/core/clntmem1.fth	\ client services for memory
[else]
fload ${BP}/ofw/core/clntphy1.fth	\ client services for memory
: >physical  ( va -- pa )
   dup fw-virt-base - fw-virt-size u<  if   ( va )
      fw-virt-base -  fw-pa +
   then
;
[then]
fload ${BP}/ofw/core/memlist.fth	\ Resource list common routines
fload ${BP}/ofw/core/showlist.fth	\ Linked list display tool
fload ${BP}/ofw/core/allocph1.fth	\ S Physical memory allocator
fload ${BP}/ofw/core/availpm.fth	\ Available memory list

fload ${BP}/cpu/x86/pc/rootnode.fth	\ Platform-specific root node changes
dev /
alias lmove lmove			\ Needed by CS5536 NAND FLASH driver
dend

fload ${BP}/dev/geode/gpio.fth		\ Rudimentary GPIO driver
fload ${BP}/cpu/x86/pc/neptune/probemem.fth	\ Memory probing

[ifdef] virtual-mode
fload ${BP}/cpu/x86/loadvmem.fth	\ /mmu node

stand-init: MMU
   " /mmu" open-dev mmu-node !
;
fload ${BP}/cpu/x86/pc/initdict.fth	\ Dynamic dictionary allocation
[then]

\ XXX should be elsewhere
dev /client-services
: chain  ( len args entry size virt -- )
   release                                       ( len args entry )
   h# 8000 alloc-mem h# 8000 +  (init-program)   ( len args )
   to %ebx  to %ecx
   go
;
device-end

fload ${BP}/cpu/x86/crc32.fth		\ Assembly language Zip CRC calculation
fload ${BP}/forth/lib/crc32.fth		\ High-level portion of CRC calculation

[ifdef] resident-packages

[ifdef]  use-ufs
support-package: ufs-file-system
   fload ${BP}/ofw/fs/ufs/ufs.fth		\ Unix file system
end-support-package
[then]

[ifdef] linux-support
\needs unix-seconds>  fload ${BP}/ofw/fs/unixtime.fth	\ Unix time calculation
\needs ($crc16)       fload ${BP}/forth/lib/crc16.fth
support-package: ext2-file-system
   fload ${BP}/ofw/fs/ext2fs/ext2fs.fth	\ Linux file system
end-support-package
[then]

[ifdef] jffs2-support
\needs unix-seconds>  fload ${BP}/ofw/fs/unixtime.fth	\ Unix time calculation
support-package: jffs2-file-system
   fload ${BP}/ofw/fs/jffs2/jffs2.fth	\ Journaling flash file system 2
end-support-package
[then]

support-package: zip-file-system
   fload ${BP}/ofw/fs/zipfs.fth		\ Zip file system
end-support-package

support-package: dropin-file-system
   fload ${BP}/ofw/fs/dropinfs.fth	\ Dropin file system
end-support-package
[then]

support-package: minix-file-system
   fload ${BP}/ofw/fs/minix.fth		\ Minix3 file system
end-support-package

fload ${BP}/ofw/core/osfile.fth		\ For testing

\ Load file format handlers

: call32 ;

fload ${BP}/ofw/core/allocsym.fth    \ Allocate memory for symbol table
fload ${BP}/ofw/core/symcif.fth
fload ${BP}/ofw/core/symdebug.fth
: release-load-area  ( boundary-adr -- )  drop  ;

fload ${BP}/cpu/x86/pc/fixkbd.fth		\ Switch keyboard scan codes

[ifdef] use-elf
fload ${BP}/ofw/elf/elf.fth
fload ${BP}/ofw/elf/elfdebug.fth
[ifdef] virtual-mode
\ This version dynamically allocates physical memory
\ : (elf-map-in) ( va size -- )  swap 1 -rot  allocate-aligned  drop  ;

\ This version depends on the assumption that physical memory is mapped 1:1 already
: (elf-map-in)  ( va size -- )  2drop  ;
[else]
: (elf-map-in)  ( va size -- )  2drop  ;
[then]
' (elf-map-in) is elf-map-in
[then]

\ Reboot and re-entry code
fload ${BP}/cpu/x86/pc/reboot.fth	\ Restart the client program
fload ${BP}/cpu/x86/pc/reenter.fth	\ Various entries into Forth
true to client-rerun?

headerless
[ifdef] virtual-mode
: (initial-heap)  ( -- adr len )  sp0 @ ps-size -  dict-limit  tuck -  ;
[else]
: (initial-heap)  ( -- adr len )  RAMtop heap-size  ;
[then]
' (initial-heap) is initial-heap
headers

" /openprom" find-device
   " FirmWorks,3.0" encode-string " model" property
device-end

[ifdef] virtual-mode
fload ${BP}/cpu/x86/pc/mmusetup.fth	\ Initial values for MMU lists
dev /mmu

\ The LPC FLASH chips decode several addresses below the FLASH "memory" array,
\ for "registers" used for programming and access to general purpose inputs.
\ We pre-claim that range of virtual addresses just in case someone needs to
\ access the LPC device with virtual-address = physical address.  (OFW and
\ ispVME both use dynamically-mapped virtual addresses for that region.)

: claim-lpc  ( -- )
   (initial-claim)
   lpc-pa  /lpc  claim-virtual drop   \ Space for 1-1 mapping LPC GPIO stuff
;
' claim-lpc to initial-claim
dend
[then]

: background-rgb  ( -- r g b )  h# ff h# ff h# ff  ;

fload ${BP}/cpu/x86/pc/neptune/devices.fth

fload ${BP}/ofw/core/countdwn.fth	\ Startup countdown
patch 3 6 get-countdown

fload ${BP}/dev/scsi/probscsi.fth	\ probe-scsi and probe-scsi-all

true ' local-mac-address? set-config-int-default
[ifdef] resident-packages
support-package: nfs
   fload ${BP}/ofw/fs/nfs/loadpkg.fth
end-support-package

[then]
devalias nfs net//obp-tftp:last//nfs

fload ${BP}/cpu/x86/pc/boot.fth
fload ${BP}/cpu/x86/pc/linux.fth

h# 3ea constant usb-port-power-map  \ USB4:PWR2  USB3:PWR1  USB2:PWR1  USB1:PWR1
fload ${BP}/dev/geode/usb.fth
' noop to go-hook	\ this is required for accessing USB device from client program (e.g. VME)

devalias net  /ethernet

\ false to stand-init-debug?
true to stand-init-debug?

hex
: i-key-wait  ( ms -- pressed? )
   cr ." Type 'i' to interrupt stand-init sequence" cr
   0  do
      key?  if
         key upc ascii I  =  if  true unloop exit  then
      then
      1 ms
   loop
   false
;

\ stand-init-debug?  [if]
warning @  warning off
: init
\ initial-heap add-memory
   init

   standalone?  if
      disable-interrupts
[ifdef] rom-loaded
      d# 300
      h# 1454 pl@ 2 and  if
         ." Interacting due to botched resume" cr  hex interact
      then
      i-key-wait  if  ." Interacting" cr  hex interact  then
      setup
[else]
      d# 3000
      i-key-wait  if  ." Interacting" cr  hex interact  then
[then]
   then
;
warning !
[then]

: (.firmware)  ( -- )
   ." Open Firmware  "  .built  cr
   ." Copyright 1999 FirmWorks  All Rights Reserved" cr
;
' (.firmware) to .firmware

: probe-all  ( -- )
   ." Probe PCI" cr  probe-pci
   ." Probe USB" cr  probe-usb
;

fload ${BP}/dev/null.fth
fload ${BP}/ofw/core/bailout.fth

fload ${BP}/cpu/x86/pc/neptune/banner.fth

\ Use values like these if you want to boot directly instead of through an intermediate script
 " u:\boot\bzImage"   ' boot-device  set-config-string-default
\ " console=uart,io,0x3f8,115200" ' boot-file  set-config-string-default
 \ " console=uart,io,0x3f8,115200 root=/dev/nfs rw nfsroot=192.168.42.100:/usr/local/rfs_x86,proto=tcp,hard ip=192.168.42.99:192.168.42.100::255.255.255.0:neptune:eth0:off init=/bin/sh" ' boot-file  set-config-string-default
 " console=uart,io,0x3f8,115200 root=/dev/nfs rw nfsroot=192.168.0.23:/home/shared/devel/neptune/sw/rfs/x86_32_rfs,proto=tcp,hard ip=192.168.0.78:192.168.0.23::255.255.255.0:neptune:eth0:off video=1027x768M@60m ethaddr=00:50:C2:1E:AF:B0 init=/bin/sh" ' boot-file  set-config-string-default
\ \needs ramdisk  " u:\boot\initrd.img" d# 128 config-string ramdisk
\needs ramdisk  " " d# 128 config-string ramdisk
\ " "   ' boot-file      set-config-string-default   \ Let the boot script set the cmdline

\ " disk:\boot\boot.fth nand:\boot\boot.fth /prober /usb/ethernet"   ' boot-device  set-config-string-default

[ifdef] use-memtest86
: memtest  ( -- )  " rom:memtest" $boot  ;
\ fload ${BP}/cpu/x86/pc/olpc/memtest.fth
[then]

\ Eliminate 4 second delay in install console for the case where
\ there is no keyboard.  The delay is unnecessary because the screen
\ does not go blank when the device is closed.
patch drop ms install-console

: cs5536-reset-all  ( -- )
[ifdef] rom-loaded
   1. h# 5140.0017 wrmsr  \ DIVIL_SOFT_RESET MSR, 5536 page 367
   begin again
[else]
   (reset-all)
[then]
;
' cs5536-reset-all to reset-all

alias reboot bye

[ifdef] use-watch-all
fload ${BP}/cpu/x86/pc/watchall.fth
[then]

alias crcgen drop  ( crc byte -- crc' )
fload ${BP}/cpu/x86/pc/saveabs.fth

fload ${BP}/forth/lib/selstr.fth

fload ${BP}/ofw/inet/loadtcp.fth

support-package: http
   fload ${BP}/ofw/inet/http.fth	\ HTTP client
end-support-package

fload ${BP}/ofw/wifi/wifi-cfg.fth
support-package: supplicant
fload ${BP}/ofw/wifi/loadpkg.fth
end-support-package

[ifdef] use-ppp
fload ${BP}/ofw/ppp/loadppp.fth
[then]

" dhcp" ' ip-address  set-config-string-default

\ fload ${BP}/cpu/x86/pc/report.fth
fload ${BP}/ofw/core/dualconsole.fth

: interpreter-init  ( -- )
   hex
   warning on
   only forth also definitions

   install-alarm

   page-mode
   #line off

\   .built cr
;

: console-start  ( -- )
[ifdef] rom-loaded
   video-map cr
[then]
   install-console
\  ?usb-keyboard
   install-dual-console

   " nvramrc-" do-drop-in
   use-nvramrc?  if  nvramrc safe-evaluate  then
;

fload ${BP}/dev/flashui.fth

\ Copies internal flash to external - everything, including config vars
: clone-flash  ( -- )
   " /flash@fff00000" open-dev >r
   load-base /rom  " read" r@  $call-method drop
   r> close-dev

   " devalias flash /flash@ffe00000" evaluate
   load-base /rom  0  ($reflash)
   " devalias flash /flash@fff00000" evaluate
;

: clone-firmware  ( -- )
   " /flash@fff00000" open-dev >r
   fw-offset u>d          " seek" r@  $call-method drop
   load-base /fw-reflash  " read" r@  $call-method drop
   r> close-dev

   " devalias flash /flash@ffe00000" evaluate
   load-base /fw-reflash  $reflash
   " devalias flash /flash@fff00000" evaluate
;

\ Change this to lpc-gpi1-pa to use the dongle LPC FLASH
lpc-gpi0-pa value lpc-gpi-pa

: vme ( -- )
   \ verbose-cif
   " rom:\isp u:\neptune.vme" $boot
;

fload ${BP}/cpu/x86/pc/neptune/versions.fth

0 to major-release
9 to minor-release
: subrel  " .3"  ;  ' subrel to sub-release

: startup  ( -- )
   standalone?  0=  if  exit  then

\   ?bailout

   probe-all
   console-start
   banner

   interpreter-init
   auto-boot

   blue-letters ." Type 'help' for more information." cancel
   cr cr

   quit
;

tag-file @ fclose  tag-file off

.( --- Saving fw.dic ...)
" fw.dic" $save-forth cr

\ patch foo decimal cold

[ifndef] notdef
.( --- Saving fw.img ...)
" fw.img"  RAMbase save-abs-rom cr
[then]

[ifdef] notdef-com32
.( Saving fw.c32 ...)
fw-pa h# 10.1000 <> [if]
.( fw-pa must be 10.1000 for COM32 load format) cr
[else]
" fw.c32"  RAMbase save-abs-rom cr
[then]
[then]

\ LICENSE_BEGIN
\ Copyright (c) 2006 FirmWorks
\
\ Permission is hereby granted, free of charge, to any person obtaining
\ a copy of this software and associated documentation files (the
\ "Software"), to deal in the Software without restriction, including
\ without limitation the rights to use, copy, modify, merge, publish,
\ distribute, sublicense, and/or sell copies of the Software, and to
\ permit persons to whom the Software is furnished to do so, subject to
\ the following conditions:
\
\ The above copyright notice and this permission notice shall be
\ included in all copies or substantial portions of the Software.
\
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
\ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
\ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\
\ LICENSE_END
