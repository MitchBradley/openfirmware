purpose: Construct the Open Firmware module collection

command: &builder &this
in: ${BP}/cpu/x86/pc/neptune/build/romreset.di
\ in: ${BP}/cpu/x86/pc/neptune/build/resume.di
in: ${BP}/cpu/x86/pc/neptune/build/rmstart.img
in: ${BP}/cpu/x86/pc/neptune/build/paging.di
in: ${BP}/cpu/x86/pc/neptune/build/fw.dic
in: ${BP}/dev/geode/nandflash/build/nandflash.fc
in: ${BP}/dev/geode/ac97/build/ac97.fc
in: ${BP}/dev/usb2/hcd/ohci/build/ohci.fc
in: ${BP}/dev/usb2/hcd/ehci/build/ehci.fc
in: ${BP}/dev/usb2/device/hub/build/hub.fc
in: ${BP}/dev/usb2/device/net/build/usbnet.fc
in: ${BP}/dev/usb2/device/serial/build/usbserial.fc
in: ${BP}/dev/usb2/device/storage/build/usbstorage.fc
in: ${BP}/dev/usb2/device/keyboard/build/usbkbd.fc
in: ${BP}/dev/pci/build/pcibridg.fc
in: ${BP}/dev/dnet/build/dnet.fc
\ in: ${BP}/clients/memtest86/memtest
in: vme.elf

build-now

fload ${BP}/cpu/x86/pc/neptune/versions.fth
" macro: FW_VERSION DA${FW_MAJOR}${FW_MINOR}" expand$ eval


fload ${BP}/cpu/x86/pc/neptune/config.fth

\ Always re-create the builton.fth file when we make a new rom.img
fload ${BP}/cpu/x86/pc/builton.bth

fload ${BP}/forth/lib/crc32.fth

hex

: pad-file  ( location -- )
   ofd @ fsize
   2dup u< abort" The ROM image is too large"
   ?do  h# ff ofd @ fputc  loop
;

.( --- Saving as neptune.rom - Direct ROM format) cr
writing neptune.rom
   " romreset.di"           $add-file
\  " resume.di"             $add-file

   " paging.di"             $add-file
   " ${BP}/cpu/x86/build/inflate.bin"        " inflate"         $add-dropin
   " fw.img"   " firmware"  $add-deflated-dropin

   " ${BP}/dev/usb2/hcd/ohci/build/ohci.fc"	" class0c0310"      $add-deflated-dropin
   " ${BP}/dev/usb2/hcd/ehci/build/ehci.fc"	" class0c0320"      $add-deflated-dropin
   " ${BP}/dev/usb2/device/hub/build/hub.fc"     " usb,class9"      $add-dropin
   " ${BP}/dev/usb2/device/net/build/usbnet.fc"       " usbnet"     $add-deflated-dropin
   " ${BP}/dev/usb2/device/keyboard/build/usbkbd.fc"  " usb,class3,1" $add-dropin
   " ${BP}/dev/usb2/device/serial/build/usbserial.fc" " usbserial"  $add-deflated-dropin
   " ${BP}/dev/usb2/device/storage/build/usbstorage.fc" " usbstorage"   $add-deflated-dropin

   " ${BP}/dev/geode/ac97/build/ac97.fc"       " pci1022,2093"   $add-deflated-dropin

   " builton.fth"                       " probe-"          $add-dropin
   " ${BP}/ofw/fcode/memtest.fth"  " memtest.fth"          $add-deflated-dropin

   " ${BP}/ofw/inet/telnetd.fth"          " telnetd"             $add-deflated-dropin

   " ${BP}/ofw/termemu/gallant.obf"             " font"          $add-deflated-dropin

   " ${BP}/dev/dnet/build/dnet.fc"       " pci1573,da0e"   $add-deflated-dropin

[ifdef] use-memtest86
   " ${BP}/clients/memtest86/memtest"               " memtest"  $add-deflated-dropin
[then]
   " ${BP}/dev/pci/build/pcibridg.fc"           " class060400"     $add-deflated-dropin
   " vme.elf"                                   " isp"             $add-deflated-dropin

   dropin-size h# 400 - pad-file	\ rmstart image must start 0x400 from end
   " rmstart.img"    $add-file

\ Insert the revision signature
dropin-size h# 40 - ofd @ fseek
" DA1   ${FW_VERSION}  D1${FW_MAJOR}" expand$  ofd @ fputs

/l buffer: crcbuf
dropin-size buffer: filebuf
0 ofd @ fseek

\ Read the entire image, compute the CRC, and store it h# 30 from the end
filebuf dropin-size ofd @ fgets dropin-size <> abort" Can't read back image"
0 crctab  filebuf dropin-size  ($crc)  crcbuf !

dropin-size h# 30 - ofd @ fseek
crcbuf /l ofd @ fputs

ofd @ fclose
