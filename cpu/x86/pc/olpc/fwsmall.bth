purpose: Build Open Firmware for OLPC
\ See license at end of file

dictionary: ${BP}/cpu/x86/build/kernel.dic
command: &x86forth &dictionary &this
in: builton.fth
build-now


fload ${BP}/cpu/x86/small.bth

hex
' $report-name is include-hook

fload ${BP}/cpu/x86/pc/olpc/smallconfig.fth

: headerless ;  : headers  ;  : headerless0 ;

' (quit) to quit

create debug-startup
: \Tags [compile] \  ; immediate
: \NotTags [compile] \  ; immediate

fload ${BP}/cpu/x86/pc/segments.fth     \ Segment selectors (address spaces)

: RAMbase  ( -- adr )  fw-virt-base  ;
: RAMtop  ( -- adr )  RAMbase /fw-ram +  ;

h# 00.0000 value    dp-loc	\ Set in patchboot
: stacktop    ( -- adr )  RAMtop  ;
: dict-limit  ( -- adr )  RAMtop  h# 06.0000 -  ;

\ XXX What we should do is pass in the top address in SP, and have
\ boot.fth allocate the user area by subtracting user-size.  But
\ we need some way of finding it again for exception re-entry.
\ prom-main-task is used in arch/pc/boot.fth .  The constant
\ value is wired into the assembly code
stacktop  user-size - constant prom-main-task	\ user area for main task

0 value load-limit	\ Top address of area at load-base
' 2drop to sync-cache

def-load-base to load-base

fload ${BP}/cpu/x86/msr.fth	        \ Access to machine specific registers

h# 1000 to pagesize
d# 12   to pageshift

dev /
1 encode-int  " #address-cells"  property
device-end

\ Memory management services
fload ${BP}/ofw/core/memlist.fth	\ Resource list common routines
fload ${BP}/ofw/core/showlist.fth	\ Linked list display tool
fload ${BP}/ofw/core/allocph1.fth	\ S Physical memory allocator
fload ${BP}/ofw/core/availpm.fth	\ Available memory list

fload ${BP}/cpu/x86/pc/rootnode.fth	\ Platform-specific root node changes

fload ${BP}/cpu/x86/pc/olpc/gpio.fth	\ Rudimentary GPIO driver
fload ${BP}/cpu/x86/pc/olpc/probemem.fth	\ Memory probing

[ifdef] virtual-mode
fload ${BP}/cpu/x86/loadvmem.fth	\ /mmu node

stand-init: MMU
   " /mmu" open-dev mmu-node !
;
fload ${BP}/cpu/x86/pc/initdict.fth	\ Dynamic dictionary allocation
[then]

fload ${BP}/cpu/x86/crc32.fth		\ Assembly language Zip CRC calculation
fload ${BP}/forth/lib/crc32.fth		\ High-level portion of CRC calculation

[ifdef] resident-packages

[ifdef] linux-support
support-package: ext2-file-system
   fload ${BP}/ofw/fs/ext2fs/ext2fs.fth	\ Linux file system
end-support-package
[then]

[ifdef] jffs2-support
support-package: jffs2-file-system
   fload ${BP}/ofw/fs/jffs2/jffs2.fth	\ Journaling flash file system 2
end-support-package
[then]

support-package: zip-file-system
   fload ${BP}/ofw/fs/zipfs.fth		\ Zip file system
end-support-package
[then]

\ Load file format handlers

: call32 ;

: release-load-area  ( boundary-adr -- )  drop  ;

headerless
[ifdef] virtual-mode
: (initial-heap)  ( -- adr len )  sp0 @ ps-size -  dict-limit  tuck -  ;
[else]
: (initial-heap)  ( -- adr len )  RAMtop heap-size  ;
[then]
' (initial-heap) is initial-heap
headers

[ifdef] virtual-mode
fload ${BP}/cpu/x86/pc/mmusetup.fth	\ Initial values for MMU lists
dev /mmu
: claim-rom  ( -- )
   (initial-claim)
   rom-pa  h# ffff.0000 over -  claim-virtual drop   \ ROM 1-1 map
;
' claim-rom to initial-claim
dend
[then]

fload ${BP}/cpu/x86/pc/olpc/devsmall.fth

\ fload ${BP}/cpu/x86/pc/olpc/countdwn.fth	\ Startup countdown

fload ${BP}/cpu/x86/pc/boot.fth

[ifdef] use-usb
: usb-port-power-map  ( -- n )
[ifdef] lx-devel
   h# 3ea exit     \ USB4:PWR2  USB3:PWR1  USB2:PWR1  USB1:PWR1
[then]
   board-revision  h# b10  h# b2f between  if  \ B1 and B2
      h# 3ab   \ USB4:PWR1  USB3:PWR1  USB2:PWR1  USB1:PWR2
   else
      \ A-test doesn't switch USB power, so the value doesn't matter.
      \ preB3 and presumably later use this value
      h# 3aa   \ USB4:PWR1  USB3:PWR1  USB2:PWR1  USB1:PWR1
   then
;
fload ${BP}/cpu/x86/pc/olpc/usb.fth
[then]

\ false to stand-init-debug?
true to stand-init-debug?

hex
: i-key-wait  ( ms -- pressed? )
   cr ." Type 'i' to interrupt stand-init sequence" cr 
   0  do
      key?  if
         key upc ascii I  =  if  true unloop exit  then
      then
      1 ms
   loop
   false
;

\ stand-init-debug?  [if]
warning @  warning off 
: init
\ initial-heap add-memory
   init

   standalone?  if
      disable-interrupts
      d# 300
      i-key-wait  if
         ." Interacting" cr  hex interact
      then

      setup
   then
;
\ warning !
[then]

' noop to .firmware

: probe-all  ( -- )
   probe-pci
[ifdef] use-usb
   probe-usb
[then]
;

[ifdef] linux-support
fload ${BP}/cpu/x86/pc/olpc/linux.fth
[then]

fload ${BP}/dev/null.fth

[ifdef] olpc
\ fload ${BP}/cpu/x86/pc/olpc/crypto.fth       \ Cryptographic image validation
\ fload ${BP}/cpu/x86/pc/olpc/lzip.fth         \ Access zip images from memory
\ fload ${BP}/cpu/x86/pc/olpc/security.fth
[then]

\ Eliminate 4 second delay in install console for the case where
\ there is no keyboard.  The delay is unnecessary because the screen
\ does not go blank when the device is closed.
patch drop ms install-console

: dcon-reset-all  ( -- )
   " screen"  " dcon-off" ['] execute-device-method  catch  if
      2drop 2drop
   then

   1. h# 5140.0017 wrmsr  \ DIVIL_SOFT_RESET MSR, 5536 page 367
   begin again
;
' dcon-reset-all to reset-all

alias reboot bye

alias crcgen drop  ( crc byte -- crc' )
fload ${BP}/cpu/x86/pc/saveabs.fth

\ fload ${BP}/cpu/x86/pc/report.fth
fload ${BP}/ofw/core/dualconsole.fth

0 value game-key-mask

: read-game-keys  ( -- )
   board-revision h# b20 <  if
      h# 100 to game-key-mask
      exit
   then

   game-key@  dup to game-key-mask  if
      ." Release the game key to continue" cr
      begin  d# 100 ms  game-key@ 0=  until
   then
;

: interpreter-init  ( -- )
   hex
   warning on
   only forth also definitions

   install-alarm

   #line off

\   .built cr
;

: console-start  ( -- )
[ifdef] rom-loaded
   video-map cr
[then]
   " screen" open-dev  ?dup  if
      set-stdout
\       logo-banner drop
\       close-dev
\       0 stdout !
   then

   install-dual-console

\   ." nvramrc" cr
\   use-nvramrc?  if  nvramrc safe-evaluate  then
;
: optional-startup  ( -- )
[ifdef] use-usb
   probe-usb
   ?usb-keyboard
[then]
;

: open-keyboard  ( -- )
   " keyboard" open-dev  ?dup  if  set-stdin  then
;


: startup  ( -- )
   standalone?  0=  if  exit  then

   console-start
   read-game-keys
   banner
   probe-pci
   open-keyboard
   optional-startup
   interpreter-init
   \ do-update

   quit
;

.( --- Saving smallfw.dic ...)
" smallfw.dic" $save-forth cr

\ patch foo decimal cold

[ifndef] notdef
.( --- Saving fw.img ...)
" smallfw.img"  RAMbase save-abs-rom cr
[then]

\ LICENSE_BEGIN
\ Copyright (c) 2006 FirmWorks
\ 
\ Permission is hereby granted, free of charge, to any person obtaining
\ a copy of this software and associated documentation files (the
\ "Software"), to deal in the Software without restriction, including
\ without limitation the rights to use, copy, modify, merge, publish,
\ distribute, sublicense, and/or sell copies of the Software, and to
\ permit persons to whom the Software is furnished to do so, subject to
\ the following conditions:
\ 
\ The above copyright notice and this permission notice shall be
\ included in all copies or substantial portions of the Software.
\ 
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
\ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
\ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\
\ LICENSE_END
