purpose: Build Open Firmware for OLPC
\ See license at end of file

dictionary: ${BP}/cpu/x86/build/basefw.dic
command: &x86forth &dictionary &this
in: builton.fth
build-now


hex
\ ' $report-name is include-hook

fload ${BP}/cpu/x86/pc/olpc/config.fth

: headerless ;  : headers  ;  : headerless0 ;

' (quit) to quit

create debug-startup
: \Tags [compile] \  ; immediate
: \NotTags [compile] \  ; immediate

fload ${BP}/cpu/x86/pc/segments.fth     \ Segment selectors (address spaces)

: RAMbase  ( -- adr )  fw-virt-base  ;
: RAMtop  ( -- adr )  RAMbase /fw-ram +  ;

h# 00.0000 value    dp-loc	\ Set in patchboot
: stacktop    ( -- adr )  RAMtop  ;
: dict-limit  ( -- adr )  RAMtop  h# 06.0000 -  ;

\ XXX What we should do is pass in the top address in SP, and have
\ boot.fth allocate the user area by subtracting user-size.  But
\ we need some way of finding it again for exception re-entry.
\ prom-main-task is used in arch/pc/boot.fth .  The constant
\ value is wired into the assembly code
stacktop  user-size - constant prom-main-task	\ user area for main task

0 value load-limit	\ Top address of area at load-base
' 2drop to sync-cache

def-load-base ' load-base set-config-int-default

true ' fcode-debug? set-config-int-default
\ false  ' auto-boot?    set-config-int-default

[ifdef] serial-console
" com1" ' output-device set-config-string-default
" com1" ' input-device set-config-string-default
[then]

\ XXX should be loaded by basefw.bth
fload ${BP}/cpu/x86/initpgm.fth		\ Basic boot handler
fload ${BP}/cpu/x86/msr.fth	        \ Access to machine specific registers

: (cpu-arch  ( -- adr len )
   " architecture" ['] root-node  get-package-property  drop
   get-encoded-string
;
' (cpu-arch to cpu-arch

h# 1000 to pagesize
d# 12   to pageshift

dev /
1 encode-int  " #address-cells"  property
" OLPC" encode-string  " architecture" property
device-end

\ Memory management services
[ifdef] virtual-mode
fload ${BP}/ofw/core/clntmem1.fth	\ client services for memory
[else]
fload ${BP}/ofw/core/clntphy1.fth	\ client services for memory
[then]
fload ${BP}/ofw/core/memlist.fth	\ Resource list common routines
fload ${BP}/ofw/core/showlist.fth	\ Linked list display tool
fload ${BP}/ofw/core/allocph1.fth	\ S Physical memory allocator
fload ${BP}/ofw/core/availpm.fth	\ Available memory list

fload ${BP}/cpu/x86/pc/rootnode.fth	\ Platform-specific root node changes
dev /
alias lmove lmove			\ Needed by CS5536 NAND FLASH driver
dend

fload ${BP}/cpu/x86/pc/olpc/port80.fth	\ Port 80 debug messages

[ifdef] lx-devel
: pnp!  ( b reg# -- )  h# 2e pc!  h# 2f pc!  ;
: pnp@  ( reg# -- b )  h# 2e pc!  h# 2f pc@  ;

: init-superio  ( -- )
   h# 87 h# 2e pc!  h# 87 h# 2e pc!  \ Enable PNP registers
   h# 20 pnp@  h# 52 =  if  \ Check device ID
      h#  5 h#  7 pnp!  \ Select keyboard controller
      h# 60 h# 61 pnp!  \ Port 60
      h# 64 h# 63 pnp!  \ Port 64
      h#  1 h# 70 pnp!  \ Keyboard interrupt 1
      h#  c h# 72 pnp!  \ Keyboard interrupt 12
      h# 83 h# f0 pnp!  \ i8042 clock, fast reset, fast A20
      h#  1 h# 30 pnp!  \ Enable
   then
;
[then]

fload ${BP}/cpu/x86/pc/olpc/gpio.fth	\ Rudimentary GPIO driver
fload ${BP}/cpu/x86/pc/olpc/probemem.fth	\ Memory probing

[ifdef] virtual-mode
fload ${BP}/cpu/x86/loadvmem.fth	\ /mmu node

stand-init: MMU
   " /mmu" open-dev mmu-node !
;
fload ${BP}/cpu/x86/pc/initdict.fth	\ Dynamic dictionary allocation
[then]

\ XXX should be elsewhere
dev /client-services
: chain  ( len args entry size virt -- )
   release                                       ( len args entry )
   h# 8000 alloc-mem h# 8000 +  (init-program)   ( len args )
   to %ebx  to %ecx
   go
;
device-end

fload ${BP}/cpu/x86/crc32.fth		\ Assembly language Zip CRC calculation
fload ${BP}/forth/lib/crc32.fth		\ High-level portion of CRC calculation

[ifdef] resident-packages

[ifdef]  use-ufs
support-package: ufs-file-system
   fload ${BP}/ofw/fs/ufs/ufs.fth		\ Unix file system
end-support-package
[then]

[ifdef] linux-support
support-package: ext2-file-system
   fload ${BP}/ofw/fs/ext2fs/ext2fs.fth	\ Linux file system
end-support-package
[then]

[ifdef] jffs2-support
support-package: jffs2-file-system
   fload ${BP}/ofw/fs/jffs2/jffs2.fth	\ Journaling flash file system 2
end-support-package
[then]

support-package: zip-file-system
   fload ${BP}/ofw/fs/zipfs.fth		\ Zip file system
end-support-package

support-package: dropin-file-system
   fload ${BP}/ofw/fs/dropinfs.fth	\ Dropin file system
end-support-package
[then]

support-package: minix-file-system
   fload ${BP}/ofw/fs/minix.fth		\ Minix3 file system
end-support-package

fload ${BP}/ofw/core/osfile.fth		\ For testing

\ Load file format handlers

: call32 ;

fload ${BP}/ofw/core/allocsym.fth    \ Allocate memory for symbol table
fload ${BP}/ofw/core/symcif.fth
fload ${BP}/ofw/core/symdebug.fth
: release-load-area  ( boundary-adr -- )  drop  ;

fload ${BP}/cpu/x86/pc/fixkbd.fth		\ Switch keyboard scan codes

[ifdef] use-elf
fload ${BP}/ofw/elf/elf.fth
fload ${BP}/ofw/elf/elfdebug.fth
[ifdef] virtual-mode
: (elf-map-in) ( va size -- )  swap 1 -rot  allocate-aligned  drop  ;
' (elf-map-in) is elf-map-in
[else]
' 2drop is elf-map-in
[then]
[then]

\ Reboot and re-entry code
fload ${BP}/cpu/x86/pc/reboot.fth	\ Restart the client program
fload ${BP}/cpu/x86/pc/reenter.fth	\ Various entries into Forth

headerless
[ifdef] virtual-mode
: (initial-heap)  ( -- adr len )  sp0 @ ps-size -  dict-limit  tuck -  ;
[else]
: (initial-heap)  ( -- adr len )  RAMtop heap-size  ;
[then]
' (initial-heap) is initial-heap
headers

" /openprom" find-device
   " FirmWorks,3.0" encode-string " model" property
device-end

[ifdef] virtual-mode
fload ${BP}/cpu/x86/pc/mmusetup.fth	\ Initial values for MMU lists
dev /mmu
: claim-rom  ( -- )
   (initial-claim)
   rom-pa  h# ffff.0000 over -  claim-virtual drop   \ ROM 1-1 map
;
' claim-rom to initial-claim
dend
[then]

fload ${BP}/cpu/x86/pc/olpc/devices.fth

[ifdef] rom-loaded
fload ${BP}/cpu/x86/pc/olpc/gpioinit.fth
fload ${BP}/cpu/x86/pc/olpc/chipinit.fth
[then]

warning @ warning off
: stand-init
   stand-init
   root-device
      board-revision  case
         h# a18  of " A1"    " OLPC A-test"  endof
         h# b18  of " B1"    " OLPC B1"      endof
         h# b28  of " B2"    " OLPC B2"      endof
         h# b30 of  " preB3" " OLPC preB3"   endof
         h# b38 of  " B3"    " OLPC B3"      endof
         h# b40 of  " preB4" " OLPC preB4"   endof
         h# b48 of  " B4"    " OLPC B4"      endof
         ( default )  >r  " ??"  " OLPC ??"  r>
      endcase
      encode-string  " banner-name" property
      model
      board-revision " board-revision-int" integer-property
      \ The "1-" removes the null byte
      " SN" find-tag  if  1-  else  " Unknown"  then  " serial-number" string-property

[ifndef] lx-devel
      8 ec-cmd  " ec-version" integer-property

      " PQ2" h# fff0.0000 h# 1.0000 sindex  dup 0>=  if  ( offset )
         h# fff0.0000 +  cscount                         ( name )
      else
         drop  " UNKNOWN"
      then
      " ec-name" string-property
[then]

   dend

   " /openprom" find-device
      h# ffff.ffc0 d# 16 " model" string-property

      " sourceurl" find-drop-in  if  " source-url" string-property  then
   dend
;
warning !

fload ${BP}/cpu/x86/pc/olpc/micin.fth   \ Microphone input AC/DC coupling

fload ${BP}/cpu/x86/pc/olpc/countdwn.fth	\ Startup countdown

fload ${BP}/dev/scsi/probscsi.fth	\ probe-scsi and probe-scsi-all

true ' local-mac-address? set-config-int-default
[ifdef] resident-packages
support-package: nfs
   fload ${BP}/ofw/fs/nfs/loadpkg.fth
end-support-package

[then]
devalias nfs net//obp-tftp:last//nfs

fload ${BP}/cpu/x86/pc/boot.fth

: usb-port-power-map  ( -- n )
[ifdef] lx-devel
   h# 3ea exit     \ USB4:PWR2  USB3:PWR1  USB2:PWR1  USB1:PWR1
[then]
   board-revision  h# b10  h# b2f between  if  \ B1 and B2
      h# 3ab   \ USB4:PWR1  USB3:PWR1  USB2:PWR1  USB1:PWR2
   else
      \ A-test doesn't switch USB power, so the value doesn't matter.
      \ preB3 and presumably later use this value
      h# 3aa   \ USB4:PWR1  USB3:PWR1  USB2:PWR1  USB1:PWR1
   then
;
fload ${BP}/cpu/x86/pc/olpc/usb.fth

\ false to stand-init-debug?
true to stand-init-debug?

hex
: i-key-wait  ( ms -- pressed? )
   cr ." Type 'i' to interrupt stand-init sequence" cr 
   0  do
      key?  if
         key upc ascii I  =  if  true unloop exit  then
      then
      1 ms
   loop
   false
;

\ stand-init-debug?  [if]
warning @  warning off 
: init
\ initial-heap add-memory
   init

   standalone?  if
      disable-interrupts
[ifdef] rom-loaded
      d# 300
      h# 1454 pl@ 2 and  if
         ." Interacting due to botched resume" cr  hex interact
      then
      i-key-wait  if  ." Interacting" cr  hex interact  then
[ifdef] lx-devel
      init-superio
[then]

      setup
[else]
      d# 3000
      i-key-wait  if  ." Interacting" cr  hex interact  then
[then]
   then
;
\ warning !
[then]

: (.firmware)  ( -- )
   ." Open Firmware  "  .built  cr
   ." Copyright 1999 FirmWorks  All Rights Reserved" cr
;
' (.firmware) to .firmware

: probe-all  ( -- )
   probe-pci
   probe-usb
;

[ifdef] linux-support
fload ${BP}/cpu/x86/pc/olpc/linux.fth
[then]

fload ${BP}/ofw/gui/bmptools.fth
fload ${BP}/dev/null.fth
fload ${BP}/ofw/core/bailout.fth

[ifdef] olpc
\ GUI
false value gui-safeboot?

\ FIXME need to implement user-ok to lockout ok prompt
: 2tuck  ( d1 d2 -- d2 d1 d2 )  2swap 2over  ;
false value fru-test?
: user-ok  "ok"  ;  \ This is supposed to check for authorization
true value user-mode?

fload ${BP}/cpu/x86/pc/olpc/banner.fth
[then]

fload ${BP}/ofw/gui/loadmenu.fth
fload ${BP}/cpu/x86/pc/olpc/disptest.fth
\ fload ${BP}/ofw/gui/insticon.fth

[ifdef] olpc
fload ${BP}/cpu/x86/pc/olpc/gui.fth
fload ${BP}/cpu/x86/pc/olpc/suspend.fth      \ Suspend/resume setup
fload ${BP}/dev/olpc/keyboard/selftest.fth   \ Keyboard diagnostic
fload ${BP}/dev/olpc/touchpad/touchpad.fth   \ Touchpad diagnostic
fload ${BP}/dev/olpc/kb3700/battery.fth      \ Battery status reports
[then]

\ Eliminate 4 second delay in install console for the case where
\ there is no keyboard.  The delay is unnecessary because the screen
\ does not go blank when the device is closed.
patch drop ms install-console

: dcon-reset-all  ( -- )
   " screen"  " dcon-off" ['] execute-device-method  catch  if
      2drop 2drop
   then

   1. h# 5140.0017 wrmsr  \ DIVIL_SOFT_RESET MSR, 5536 page 367
   begin again
;
' dcon-reset-all to reset-all

alias reboot bye

[ifdef] use-watch-all
fload ${BP}/cpu/x86/pc/watchall.fth
[then]

alias crcgen drop  ( crc byte -- crc' )
fload ${BP}/cpu/x86/pc/saveabs.fth

fload ${BP}/forth/lib/selstr.fth

fload ${BP}/ofw/inet/loadtcp.fth

support-package: http
   fload ${BP}/ofw/inet/http.fth	\ HTTP client
end-support-package

fload ${BP}/ofw/wifi/wifi-cfg.fth
support-package: supplicant
fload ${BP}/ofw/wifi/loadpkg.fth
end-support-package

[ifdef] use-ppp
fload ${BP}/ofw/ppp/loadppp.fth
[then]

[ifdef] pc-linux
" a:\initrd.imz" d# 128 config-string ramdisk
" root=/dev/ram0 mount_ramdisk=1"  ' boot-file        set-config-string-default
" a:\vmlinuz"                      ' boot-device      set-config-string-default
true                               ' client-symbols?  set-config-int-default
\ Also try " console=/dev/ttyS0,9600 console=/dev/tty0" in boot-file
[then]

" dhcp" ' ip-address  set-config-string-default

\ fload ${BP}/cpu/x86/pc/report.fth
fload ${BP}/ofw/core/dualconsole.fth

: user-switch?  ( -- flag )
[ifdef] lx-devel  false exit  [then]
   atest?  if  true exit  then
true exit
   game-key@  0<>  dup  if
      ." Release the game key to continue" cr
      begin  d# 100 ms  game-key@ 0=  until
   then
;
: fast-boot?  ( -- flag )
[ifdef] rom-loaded
   user-switch? 0=
[else]
   false
[then]
;

: set-mc  ( 19-val 1a-val -- )
   lbsplit  h# 66  h# 69  do  i cmos!  -1 +loop
   lbsplit  h# 62  h# 65  do  i cmos!  -1 +loop
   1 h# 61 cmos!   1 h# 60 cmos!
;

: interpreter-init  ( -- )
   hex
   warning on
   only forth also definitions

   install-alarm

   page-mode
   #line off

\   .built cr
;

: console-start  ( -- )
[ifdef] rom-loaded
   video-map cr
[then]
   " screen" open-dev  ?dup  if
      set-stdout
\       logo-banner drop
\       close-dev
\       0 stdout !
   then

   install-dual-console

   ?gui-banner
   " probe-" do-drop-in
\   ." nvramrc" cr
\   use-nvramrc?  if  nvramrc safe-evaluate  then
;
: debug-interact  ( -- )
   early-interact?  if
      " Interrupting startup sequence prior to probing" .because
      ." Type 'resume'  to resume normal startup sequence." cr
      \ fallback-device io console-io
      ( help-msg ) interact
   then
;

: optional-startup  ( -- )
   probe-usb
   ?usb-keyboard
;

: open-keyboard  ( -- )
   " keyboard" open-dev  ?dup  if  set-stdin  then
;

: startup  ( -- )
   standalone?  0=  if  exit  then

\   ?bailout

   no-page

   console-start
   fast-boot?   if
      probe-pci
      ['] false to interrupt-auto-boot?
      interpreter-init
[ifndef] lx-devel
      enable-power-button
[then]
      auto-boot
      open-keyboard
      optional-startup
   else
      ." Interactive boot" cr
      ." Keyboard probe" cr
\     ?bailout
      open-keyboard
      probe-pci
      ." USB probe" cr
      optional-startup
      interpreter-init
[ifndef] lx-devel
      enable-power-button
[then]
      auto-boot
   then

   blue-letters ." Type 'help' for more information." black-letters
   cr cr

   quit
;

fload ${BP}/cpu/x86/pc/olpc/copynand.fth

\ This helps with TeraTerm, which sends ESC-O as the arrow key prefix
also hidden also keys-forth definitions
warning @  warning off
: esc-o  key lastchar !  [""] esc-[ do-command  ;
warning !
previous previous definitions

.( --- Saving fw.dic ...)
"" fw.dic save-forth cr

\ patch foo decimal cold

[ifndef] notdef
.( --- Saving fw.img ...)
" fw.img"  RAMbase save-abs-rom cr
[then]

[ifdef] notdef-com32
.( Saving fw.c32 ...)
fw-pa h# 10.1000 <> [if]
.( fw-pa must be 10.1000 for COM32 load format) cr
[else]
" fw.c32"  RAMbase save-abs-rom cr
[then]
[then]

\ LICENSE_BEGIN
\ Copyright (c) 2006 FirmWorks
\ 
\ Permission is hereby granted, free of charge, to any person obtaining
\ a copy of this software and associated documentation files (the
\ "Software"), to deal in the Software without restriction, including
\ without limitation the rights to use, copy, modify, merge, publish,
\ distribute, sublicense, and/or sell copies of the Software, and to
\ permit persons to whom the Software is furnished to do so, subject to
\ the following conditions:
\ 
\ The above copyright notice and this permission notice shall be
\ included in all copies or substantial portions of the Software.
\ 
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
\ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
\ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\
\ LICENSE_END
