purpose: Build Open Firmware for OLPC
\ See license at end of file

dictionary: ${BP}/cpu/x86/build/basefw.dic
command: &x86forth &dictionary &this
in: builton.fth
build-now


hex
\ ' $report-name is include-hook

fload ${BP}/cpu/x86/pc/olpc/config.fth

[ifdef] virtual-mode
h#        3 constant pte-control	\ Page table entry attributes
[then]

: headerless ;  : headers  ;  : headerless0 ;

' (quit) to quit

create debug-startup
: \Tags [compile] \  ; immediate
: \NotTags [compile] \  ; immediate

fload ${BP}/cpu/x86/pc/segments.fth     \ Segment selectors (address spaces)

: RAMbase  ( -- adr )  fw-virt-base  ;
: RAMtop  ( -- adr )  RAMbase /fw-ram +  ;

h# 00.0000 value    dp-loc	\ Set in patchboot
: stacktop    ( -- adr )  RAMtop  ;
: dict-limit  ( -- adr )  RAMtop  h# 06.0000 -  ;

\ XXX What we should do is pass in the top address in SP, and have
\ boot.fth allocate the user area by subtracting user-size.  But
\ we need some way of finding it again for exception re-entry.
\ prom-main-task is used in arch/pc/boot.fth .  The constant
\ value is wired into the assembly code
stacktop  user-size - constant prom-main-task	\ user area for main task

0 value load-limit	\ Top address of area at load-base
' 2drop to sync-cache

def-load-base ' load-base set-config-int-default

true ' fcode-debug? set-config-int-default
\ false  ' auto-boot?    set-config-int-default

[ifdef] serial-console
" com1" ' output-device set-config-string-default
" com1" ' input-device set-config-string-default
[then]

\ XXX should be loaded by basefw.bth
fload ${BP}/cpu/x86/initpgm.fth		\ Basic boot handler
fload ${BP}/cpu/x86/msr.fth	        \ Access to machine specific registers

: (cpu-arch  ( -- adr len )
   " architecture" ['] root-node  get-package-property  drop
   get-encoded-string
;
' (cpu-arch to cpu-arch

h# 1000 to pagesize
d# 12   to pageshift

dev /
1 encode-int  " #address-cells"  property

" OLPC-Dev1A" model
" OLPC" encode-string  " architecture" property

\ XXX figure out bus frequency.  How?
\ d# 33,333,333 " clock-frequency" integer-property
device-end

\ Memory management services
[ifdef] virtual-mode
fload ${BP}/ofw/core/clntmem1.fth	\ client services for memory
[else]
fload ${BP}/ofw/core/clntphy1.fth	\ client services for memory
[then]
fload ${BP}/ofw/core/memlist.fth	\ Resource list common routines
fload ${BP}/ofw/core/showlist.fth	\ Linked list display tool
fload ${BP}/ofw/core/allocph1.fth	\ S Physical memory allocator
fload ${BP}/ofw/core/availpm.fth	\ Available memory list

fload ${BP}/cpu/x86/pc/rootnode.fth	\ Platform-specific root node changes
dev /
alias lmove lmove			\ Needed by CS5536 NAND FLASH driver
dend

fload ${BP}/cpu/x86/pc/olpc/gpio.fth	\ Rudimentary GPIO driver
fload ${BP}/cpu/x86/pc/olpc/probemem.fth	\ Memory probing

[ifdef] virtual-mode
fload ${BP}/cpu/x86/loadvmem.fth	\ /mmu node
stand-init: MMU
   " /mmu" open-dev mmu-node !
;
fload ${BP}/cpu/x86/pc/initdict.fth	\ Dynamic dictionary allocation
[then]

\ XXX should be elsewhere
dev /client-services
: chain  ( len args entry size virt -- )
   release                                       ( len args entry )
   h# 8000 alloc-mem h# 8000 +  (init-program)   ( len args )
   to %ebx  to %ecx
   go
;
device-end

fload ${BP}/cpu/x86/crc32.fth		\ Assembly language Zip CRC calculation
fload ${BP}/forth/lib/crc32.fth		\ High-level portion of CRC calculation

[ifdef] resident-packages

[ifdef]  use-ufs
support-package: ufs-file-system
   fload ${BP}/ofw/fs/ufs/ufs.fth		\ Unix file system
end-support-package
[then]

[ifdef] linux-support
support-package: ext2-file-system
   fload ${BP}/ofw/fs/ext2fs/ext2fs.fth	\ Linux file system
end-support-package
[then]

[ifdef] jffs2-support
support-package: jffs2-file-system
   fload ${BP}/ofw/fs/jffs2/jffs2.fth	\ Journaling flash file system 2
end-support-package
[then]

support-package: zip-file-system
   fload ${BP}/ofw/fs/zipfs.fth		\ Zip file system
end-support-package

support-package: dropin-file-system
   fload ${BP}/ofw/fs/dropinfs.fth	\ Dropin file system
end-support-package
[then]

\ Load file format handlers

: call32 ;

fload ${BP}/ofw/core/allocsym.fth    \ Allocate memory for symbol table
fload ${BP}/ofw/core/symcif.fth
fload ${BP}/ofw/core/symdebug.fth
: release-load-area  ( boundary-adr -- )  drop  ;

fload ${BP}/cpu/x86/pc/fixkbd.fth		\ Switch keyboard scan codes

[ifdef] use-elf
fload ${BP}/ofw/elf/elf.fth
fload ${BP}/ofw/elf/elfdebug.fth
[ifdef] virtual-mode
: (elf-map-in) ( va size -- )  swap 1 -rot  allocate-aligned  drop  ;
' (elf-map-in) is elf-map-in
[else]
' 2drop is elf-map-in
[then]
[then]

\ Reboot and re-entry code
fload ${BP}/cpu/x86/pc/reboot.fth	\ Restart the client program
fload ${BP}/cpu/x86/pc/reenter.fth	\ Various entries into Forth

headerless
\ : (initial-heap)  ( -- adr len )  sp0 @ ps-size -  dict-limit  tuck -  ;
: (initial-heap)  ( -- adr len )  RAMtop heap-size   ;
' (initial-heap) is initial-heap
headers

" /openprom" find-device
   " FirmWorks,3.0" encode-string " model" property
device-end

[ifdef] virtual-mode
fload ${BP}/cpu/x86/pc/mmusetup.fth	\ Initial values for MMU lists
[then]

fload ${BP}/cpu/x86/pc/olpc/devices.fth

warning @ warning off
: stand-init
   stand-init
   root-device
      kb3920?  if  " OLPC A-test"  else  " OLPC B-test"  then
      encode-string  " banner-name" property
   dend
;
warning !

fload ${BP}/ofw/core/countdwn.fth	\ Startup countdown
patch 3 6 get-countdown

fload ${BP}/dev/scsi/probscsi.fth	\ probe-scsi and probe-scsi-all

true ' local-mac-address? set-config-int-default
[ifdef] resident-packages
support-package: nfs
   fload ${BP}/ofw/fs/nfs/loadpkg.fth
end-support-package

[then]
devalias nfs net//obp-tftp:last//nfs


fload ${BP}/cpu/x86/pc/mscal.fth
fload ${BP}/cpu/x86/pc/boot.fth

\ false to stand-init-debug?
true to stand-init-debug?


hex
stand-init-debug?  [if]
warning @  warning off 
: init
\ initial-heap add-memory
   init

   standalone?  if
      disable-interrupts
      cr ." Type 'i' to interrupt stand-init sequence" cr 
      d# 1000 ms
      key?  if
         key upc ascii I  =  if  ." Interacting" cr  hex interact  then
      then
   then
;
warning !
[then]

: (.firmware)  ( -- )
   ." Open Firmware  "  .built  cr
   ." Copyright 1999 FirmWorks  All Rights Reserved" cr
;
' (.firmware) to .firmware

hex 
\ If there is a PCI ethernet adapter, use it as the default net device,
\ otherwise use any ethernet that can be found in the device tree.
: report-net  ( -- )
   " /usb/ethernet" 2dup  find-package  if  ( name$ phandle )
      drop                                  ( name$ )
   else                                     ( name$ )
      2drop  " /ethernet"                   ( name$' )
   then                                     ( name$ )
   " net" 2swap $devalias                   ( )
;

[ifdef] notdef   \ We have the graphical penguin
: linux-logo  ( -- )
   " penguin.txt" find-drop-in  if  page type  then
;
[then]

[ifdef] olpc
: probe-usb2
   " /usb@f,5" select-dev
   " probe-usb" eval  \ EHCI probe
   unselect
   ." USB2 devices:" cr
   " show-devs /usb@f,5" eval
   report-disk
;
: probe-usb  ( -- )
   \ Open OHCI so it will claim USB 1 devices that the EHCI controller disowns
   " /usb@f,4" select-dev
   " power-usb-ports" eval  \ Get the devices going
   d# 500 ms

   probe-usb2               \ First dibs to EHCI/USB2

   " probe-usb" eval  \ OHCI probe
   unselect
   ." USB1 devices:" cr
   " show-devs /usb@f,4" eval
\   report-disk
;
[else]
: probe-usb
   " /usb" select-dev
   d# 300 ms
   " probe-usb" eval
   unselect
   " show-devs /usb" eval
   report-disk
;
[then]

: probe-all  ( -- )
   " probe-" do-drop-in
   ." probe-pci"  cr
\   debug-me
   probe-pci
\ probe-usb
[ifdef] olpc
   probe-usb
[else]
 ." Not probing USB; execute probe-usb manually" cr
[then]
   report-disk
   report-net
   report-keyboard
;

[ifdef] linux-support
fload ${BP}/cpu/x86/pc/olpc/linux.fth
[then]

fload ${BP}/ofw/gui/bmptools.fth
fload ${BP}/dev/null.fth
fload ${BP}/ofw/core/bailout.fth

[ifdef] olpc
\ GUI
false value gui-safeboot?

\ FIXME need to implement user-ok to lockout ok prompt
: 2tuck  ( d1 d2 -- d2 d1 d2 )  2swap 2over  ;
false value fru-test?
: user-ok  "ok"  ;  \ This is supposed to check for authorization
true value user-mode?

fload ${BP}/cpu/x86/pc/olpc/banner.fth

[ifdef] sd-diags
: loadsd  " rom:sd" $boot  ;
[then]
[then]

fload ${BP}/ofw/gui/loadmenu.fth
\ fload ${BP}/ofw/gui/insticon.fth

[ifdef] olpc
fload ${BP}/cpu/x86/pc/olpc/gui.fth
[then]

\ Eliminate 4 second delay in install console for the case where
\ there is no keyboard.  The delay is unnecessary because the screen
\ does not go blank when the device is closed.
patch drop ms install-console

: boot-configure  ( -- )
   cr ." Trying startup script disk:\boot\olpc-boot.fth" cr

   " fload disk:\boot\olpc-boot.fth" ['] eval catch  if
      2drop
   else
      show-disk exit
   then

   " fload disk:\boot\olpcboot.fth" ['] eval catch  if
      2drop
   else
      show-disk exit
   then

   " disk:\boot\initrd.img" 2dup  open-dev  ?dup  if  ( name$ ih )
      close-dev  " ramdisk" $setenv
   else
      2drop
   then
   
   " disk:\boot\vmlinuz" 2dup  open-dev  ?dup  if  ( name$ ih )
      close-dev  " boot-device" $setenv
      show-disk
      exit
   then
   2drop

   cr ." Trying startup script nand:\boot\olpc-boot.fth" cr
   " fload nand:\boot\olpc-boot.fth" ['] eval catch  if
      2drop
   else
      show-nand exit
   then

   " ro root=mtd0 rootfstype=jffs2 console=ttyS0,115200 console=tty0 fbcon=font:SUN12x22 pci=nobios video=gxfb:1024x768-16"
   " boot-file" $setenv

   " "  " ramdisk"  $setenv

   " nand:\boot\vmlinuz" " boot-device" $setenv
   show-nand
;

: config&boot  ( -- )
   boot-configure auto-boot?  if  boot  then
;
" config&boot" ' boot-command set-config-string-default

: dcon-reset-all  ( -- )
   " screen"  " dcon-off" ['] execute-device-method  catch  if
      2drop 2drop
   then

   (reset-all)
;
' dcon-reset-all to reset-all

alias reboot bye

[ifdef] use-watch-all
fload ${BP}/cpu/x86/pc/watchall.fth
[then]

alias crcgen drop  ( crc byte -- crc' )
fload ${BP}/cpu/x86/pc/saveabs.fth

fload ${BP}/forth/lib/selstr.fth

fload ${BP}/ofw/inet/loadtcp.fth

support-package: http
   fload ${BP}/ofw/inet/http.fth	\ HTTP client
end-support-package

[ifdef] use-ppp
fload ${BP}/ofw/ppp/loadppp.fth
[then]

[ifdef] pc-linux
" a:\initrd.imz" d# 128 config-string ramdisk
" root=/dev/ram0 mount_ramdisk=1"  ' boot-file        set-config-string-default
" a:\vmlinuz"                      ' boot-device      set-config-string-default
true                               ' client-symbols?  set-config-int-default
\ Also try " console=/dev/ttyS0,9600 console=/dev/tty0" in boot-file
[then]

" dhcp" ' ip-address  set-config-string-default

\ fload ${BP}/cpu/x86/pc/report.fth
fload ${BP}/ofw/core/dualconsole.fth

: startup  ( -- )
   standalone?  0=  if  exit  then

\   ?bailout

   no-page
\   ." calibrate-ms"  cr
   calibrate-ms

   " screen" open-dev  ?dup  if
      stdout !
\       logo-banner drop
\       close-dev
\       0 stdout !
   then

   ?bailout

   " keyboard" open-dev  ?dup  if  stdin !  then

   install-dual-console
   ?gui-banner

   early-interact?  if
      " Interrupting startup sequence prior to probing" .because
      ." Type 'resume'  to resume normal startup sequence." cr
      \ fallback-device io console-io
      ( help-msg ) interact
   then

\   ." nvramrc" cr
\   use-nvramrc?  if  nvramrc safe-evaluate  then

\   auto-banner?  if
      " Probing" ?type  probe-all
\      " Install console" ?type  install-console
\      ?gui-banner
\   then

   " keyboard" expand-alias  if   ( devspec$ )
      drop " /usb"  comp  0=  if  ( )
         red-letters  ." Using USB keyboard." cr  black-letters
         " keyboard" input
      then
   then

   hex
   warning on
   only forth also definitions

   install-alarm

   page-mode
   #line off

\   .built cr

   auto-boot

[ifdef] linux-support
   ." See "
   blue-letters ." http://firmworks.com/QuickRef.html" black-letters
   cr cr

\   ." Type 'help-linux' to learn about Linux loading options" cr
\   ." Type 'boot' to just do it.
[then]
[ifdef] sd-diags
   ." Type 'loadsd' to start SD diags" cr
[then]

   quit
;

[ifdef] olpc
fload ${BP}/cpu/x86/pc/olpc/copynand.fth
[then]

[ifndef] olpc
\ This sometimes helps with VGA/EGA boards, enabling I/O space access
\ to the CRT registers that control the hardware cursor.
: cursor  ( -- )
   " begin-select /display  3 my-space 4 + config-w! unselect" evaluate
;
[then]

\ This helps with TeraTerm, which sends ESC-O as the arrow key prefix
also hidden also keys-forth definitions
warning @  warning off
: esc-o  key lastchar !  [""] esc-[ do-command  ;
warning !
previous previous definitions

.( --- Saving fw.dic ...)
"" fw.dic save-forth cr

\ patch foo decimal cold

[ifndef] notdef
.( --- Saving fw.img ...)
" fw.img"  RAMbase save-abs-rom cr
[then]

[ifdef] notdef-com32
.( Saving fw.c32 ...)
fw-pa h# 10.1000 <> [if]
.( fw-pa must be 10.1000 for COM32 load format) cr
[else]
" fw.c32"  RAMbase save-abs-rom cr
[then]
[then]

\ LICENSE_BEGIN
\ Copyright (c) 2006 FirmWorks
\ 
\ Permission is hereby granted, free of charge, to any person obtaining
\ a copy of this software and associated documentation files (the
\ "Software"), to deal in the Software without restriction, including
\ without limitation the rights to use, copy, modify, merge, publish,
\ distribute, sublicense, and/or sell copies of the Software, and to
\ permit persons to whom the Software is furnished to do so, subject to
\ the following conditions:
\ 
\ The above copyright notice and this permission notice shall be
\ included in all copies or substantial portions of the Software.
\ 
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
\ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
\ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\
\ LICENSE_END
